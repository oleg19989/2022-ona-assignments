select(examiner_id, filing_date, appl_status_date)
examiner_dates <- examiner_dates %>%
mutate(start_date = ymd(filing_date), end_date = as_date(dmy_hms(appl_status_date)))
examiner_dates <- examiner_dates %>%
group_by(examiner_id) %>%
summarise(
earliest_date = min(start_date, na.rm = TRUE),
latest_date = max(end_date, na.rm = TRUE),
tenure_days = interval(earliest_date, latest_date) %/% days(1)
) %>%
filter(year(latest_date)<2018)
applications <- applications %>%
left_join(examiner_dates, by = "examiner_id")
rm(examiner_dates)
gc()
#we pick 2 workgroups to focus on: 163 and 172
#creating a subset and summaries of the workgroup 163
wg163 <- subset(applications, grepl("^163", applications$examiner_art_unit))
wg163$gender <- factor(wg163$gender)
wg163$race <- factor(wg163$race)
summary(wg163$gender)
summary(wg163$race)
summary(wg163$tenure_days)
#creating a subset and summaries of the workgroup 172
wg172 <- subset(applications, grepl("^172", applications$examiner_art_unit))
wg172$gender <- factor(wg172$gender)
wg172$race <- factor(wg172$race)
summary(wg172$gender)
summary(wg172$race)
summary(wg172$tenure_days)
#combining 2 datasets together (for plotting purposes)
library(dplyr)
wg163$workgroup <- c('wg_163')
wg172$workgroup <- c('wg_172')
combined <- union(x=wg163,y=wg172)
#plot gender and race across the workgroups
library(ggplot2)
ggplot(combined, aes(workgroup, ..count..)) + geom_bar(aes(fill = race), position = "dodge")
ggplot(combined, aes(workgroup, ..count..)) + geom_bar(aes(fill = gender), position = "dodge")
toPlot<-combined%>%
group_by(workgroup, gender, race)%>%
summarise(n = n())%>%
group_by(race)%>%
mutate(prop = n/sum(n))
ggplot(data = toPlot, aes(workgroup, prop, fill = gender)) +
geom_col() +
facet_grid(~race)+
scale_fill_manual(values = c("white","green", "red", "blue"))
#plotting the directed graph
library(igraph)
library(tidygraph)
library(ggraph)
combined <- combined %>% rowid_to_column('ID')
graph <- tbl_graph(edges = edges, nodes=combined$examiner_id, directed = TRUE)
social_net_tbls <- tbl_graph(nodes = combined$examiner_id,
edges = edges,
directed = FALSE)
social_net_tbls <- tbl_graph(nodes = combined$ID,
edges = edges,
directed = FALSE)
social_net_tbls <- tbl_graph(nodes = combined$uspc_class,
edges = edges,
directed = FALSE)
#plotting the directed graph
library(igraph)
library(tidygraph)
library(ggraph)
combined <- combined %>% rowid_to_column('ID')
#plotting the directed graph
library(igraph)
library(tidygraph)
library(ggraph)
graph <- tbl_graph(edges = edges, nodes=combined$examiner_id, directed = TRUE)
#plotting the directed graph
library(igraph)
library(tidygraph)
library(ggraph)
# drop the nulls in the edges dataframe
edges <- drop_na(edges, ego_examiner_id)
edges <-drop_na(edges, alter_examiner_id)
# merge original edges dataframe with both workgroups
FULLWG1 <- inner_join(wg163, edges, by = "application_number", copy = FALSE)
FULLWG2 <- inner_join(wg172, edges, by = "application_number", copy = FALSE)
# generate a nodes dataframe for WG1 for both the ego_examiner_id and alter_examiner_id
WG1_nodes_ego <- FULLWG1 %>%
distinct(ego_examiner_id) %>%
rename(ID = ego_examiner_id)
WG1_nodes_alter <- FULLWG1 %>%
distinct(alter_examiner_id) %>%
rename(ID = alter_examiner_id)
# perform a union of both dataframes to create a final node list and filter for unique nodes only
WG1_FinalNodes <- union_all(WG1_nodes_ego, WG1_nodes_alter)
WG1_FinalNodes <- unique(WG1_FinalNodes)
# do the same for WG2
WG2_nodes_ego <- FULLWG2 %>%
distinct(ego_examiner_id) %>%
rename(ID = ego_examiner_id)
WG2_nodes_alter <- FULLWG2 %>%
distinct(alter_examiner_id) %>%
rename(ID = alter_examiner_id)
WG2_FinalNodes <- union_all(WG2_nodes_ego, WG2_nodes_alter)
WG2_FinalNodes <- unique(WG2_FinalNodes)
# rename the applicants id variables in both groups
WG1_Edges <- FULLWG1 %>%
select(ego_examiner_id, alter_examiner_id) %>%
rename(From = ego_examiner_id, To = alter_examiner_id)
WG2_Edges <- FULLWG2 %>%
select(ego_examiner_id, alter_examiner_id) %>%
rename(From = ego_examiner_id, To = alter_examiner_id)
# create graph objects for both workgroups
WG1_network <- graph_from_data_frame(d = WG1_Edges, vertices = WG1_FinalNodes, directed = FALSE)
WG2_network <- graph_from_data_frame(d = WG2_Edges, vertices = WG2_FinalNodes, directed = FALSE)
plot(WG1_network, edge.arrow.size = 0.2, vertex.size= 5,vertex.label=NA)
#social_net_tbls <- tbl_graph(nodes = combined$uspc_class,
#                            edges = edges,
#                           directed = FALSE)
WG1_network <- graph_from_data_frame(d = edges, vertices = combined$examiner_id, directed = TRUE)
test = merge(x=combined,y=edges,by = 'application_number')
View(test)
#setting up the variables and tables
library(igraph)
library(tidygraph)
library(ggraph)
# first get work group for each examiner and limit to our two wgs of interest
examiner_aus = distinct(subset(applications, select=c(examiner_art_unit, examiner_id)))
# we eventually want to make a network with nodes colored by work group, so lets add that indicator
examiner_aus$wg = substr(examiner_aus$examiner_art_unit, 1,3)
# restrict down to our selected art units to reduce merging complexity later on
examiner_aus = examiner_aus[examiner_aus$wg==163 | examiner_aus$wg==172,]
# now we will merge in the aus df on applications
tM = merge(x=edges, y=examiner_aus, by.x="ego_examiner_id", by.y="examiner_id", all.x=TRUE)
tM = tM %>% rename(ego_art_unit=examiner_art_unit, ego_wg=wg)
# drop the examiner edges who are not in 163 or 176
tM = drop_na(tM)
# now repeat for the alter examiners
tM = merge(x=tM, y=examiner_aus, by.x="alter_examiner_id", by.y="examiner_id", all.x=TRUE)
tM = tM %>% rename(alter_art_unit=examiner_art_unit, alter_wg=wg)
tM = drop_na(tM)
# we are left with 870 edges corresponding to instances of examiners in wg163 or wg176 asking for advice
egoNodes = subset(tM, select=c(ego_examiner_id,ego_art_unit, ego_wg)) %>% rename(examiner_id=ego_examiner_id,art_unit=ego_art_unit,wg=ego_wg)
alterNodes = subset(tM, select=c(alter_examiner_id,alter_art_unit, alter_wg))%>% rename(examiner_id=alter_examiner_id,art_unit=alter_art_unit,wg=alter_wg)
nodes = rbind(egoNodes, alterNodes)
nodes = distinct(nodes)
# problem: when we reduce to the list of distinct vertices, we actually have more than we should, since some examiners move amongst art units/wgs in this data subset
nodes = nodes %>% group_by(examiner_id) %>% summarise(examiner_id=first(examiner_id), art_unit=first(art_unit), wg=first(wg))
# create graph objects for both workgroups
adviceNet = graph_from_data_frame(d=tM, vertices=nodes, directed=TRUE)
adviceNet
#setting up the variables and tables
library(igraph)
library(tidygraph)
library(ggraph)
distinct_groups = distinct(subset(applications, select=c(examiner_art_unit, examiner_id)))
# we eventually want to make a network with nodes colored by work group, so lets add that indicator
distinct_groups$wg = substr(distinct_groups$examiner_art_unit, 1,3)
# restrict down to our selected art units to reduce merging complexity later on
distinct_groups = distinct_groups[distinct_groups$wg==163 | distinct_groups$wg==172,]
# now we will merge in the aus df on applications
tM = merge(x=edges, y=distinct_groups, by.x="ego_examiner_id", by.y="examiner_id", all.x=TRUE)
tM = tM %>% rename(ego_art_unit=examiner_art_unit, ego_wg=wg)
# drop the examiner edges who are not in 163 or 176
tM = drop_na(tM)
# now repeat for the alter examiners
tM = merge(x=tM, y=distinct_groups, by.x="alter_examiner_id", by.y="examiner_id", all.x=TRUE)
tM = tM %>% rename(alter_art_unit=examiner_art_unit, alter_wg=wg)
tM = drop_na(tM)
# we are left with 870 edges corresponding to instances of examiners in wg163 or wg176 asking for advice
egoNodes = subset(tM, select=c(ego_examiner_id,ego_art_unit, ego_wg)) %>% rename(examiner_id=ego_examiner_id,art_unit=ego_art_unit,wg=ego_wg)
alterNodes = subset(tM, select=c(alter_examiner_id,alter_art_unit, alter_wg))%>% rename(examiner_id=alter_examiner_id,art_unit=alter_art_unit,wg=alter_wg)
nodes = rbind(egoNodes, alterNodes)
nodes = distinct(nodes)
# problem: when we reduce to the list of distinct vertices, we actually have more than we should, since some examiners move amongst art units/wgs in this data subset
nodes = nodes %>% group_by(examiner_id) %>% summarise(examiner_id=first(examiner_id), art_unit=first(art_unit), wg=first(wg))
#setting up the variables and tables
library(igraph)
library(tidygraph)
library(ggraph)
#creating a dataset with distinct information about only people from workgroups of our interest (in this case, 163 and 172) using both ego and alter nodes
distinct_groups = distinct(subset(applications, select=c(examiner_art_unit, examiner_id)))
distinct_groups$wg = substr(distinct_groups$examiner_art_unit, 1,3)
distinct_groups = distinct_groups[distinct_groups$wg==163 | distinct_groups$wg==172,]
merged = merge(x=edges, y=distinct_groups, by.x="ego_examiner_id", by.y="examiner_id", all.x=TRUE)
merged = merged %>% rename(ego_art_unit=examiner_art_unit, ego_wg=wg)
merged = drop_na(merged)
merged = merge(x=merged, y=distinct_groups, by.x="alter_examiner_id", by.y="examiner_id", all.x=TRUE)
merged = merged %>% rename(alter_art_unit=examiner_art_unit, alter_wg=wg)
merged = drop_na(merged)
New_nodes = subset(merged, select=c(ego_examiner_id,ego_art_unit, ego_wg)) %>% rename(examiner_id=ego_examiner_id,art_unit=ego_art_unit,wg=ego_wg)
alterNodes = subset(merged, select=c(alter_examiner_id,alter_art_unit, alter_wg))%>% rename(examiner_id=alter_examiner_id,art_unit=alter_art_unit,wg=alter_wg)
nodes = rbind(New_nodes, alterNodes)
nodes = distinct(nodes)
# problem: when we reduce to the list of distinct vertices, we actually have more than we should, since some examiners move amongst art units/wgs in this data subset
nodes = nodes %>% group_by(examiner_id) %>% summarise(examiner_id=first(examiner_id), art_unit=first(art_unit), wg=first(wg))
#setting up the variables and tables
library(igraph)
library(tidygraph)
library(ggraph)
#creating a dataset with distinct information about only people from workgroups of our interest (in this case, 163 and 172) using both ego and alter nodes
distinct_groups = distinct(subset(applications, select=c(examiner_art_unit, examiner_id)))
distinct_groups$wg = substr(distinct_groups$examiner_art_unit, 1,3)
distinct_groups = distinct_groups[distinct_groups$wg==163 | distinct_groups$wg==172,]
merged = merge(x=edges, y=distinct_groups, by.x="ego_examiner_id", by.y="examiner_id", all.x=TRUE)
merged = merged %>% rename(ego_art_unit=examiner_art_unit, ego_wg=wg)
merged = drop_na(merged)
merged = merge(x=merged, y=distinct_groups, by.x="alter_examiner_id", by.y="examiner_id", all.x=TRUE)
merged = merged %>% rename(alter_art_unit=examiner_art_unit, alter_wg=wg)
merged = drop_na(merged)
New_nodes = subset(merged, select=c(ego_examiner_id,ego_art_unit, ego_wg)) %>% rename(examiner_id=ego_examiner_id,art_unit=ego_art_unit,wg=ego_wg)
alterNodes = subset(merged, select=c(alter_examiner_id,alter_art_unit, alter_wg))%>% rename(examiner_id=alter_examiner_id,art_unit=alter_art_unit,wg=alter_wg)
nodes = rbind(New_nodes, alterNodes)
nodes = distinct(nodes)
nodes = nodes %>% group_by(examiner_id) %>% summarise(examiner_id=first(examiner_id), art_unit=first(art_unit), wg=first(wg))
#setting up the variables and tables
library(igraph)
library(tidygraph)
library(ggraph)
#creating a dataset with distinct information about only people from workgroups of our interest (in this case, 163 and 172) using both ego and alter nodes
distinct_groups = distinct(subset(applications, select=c(examiner_art_unit, examiner_id)))
distinct_groups$wg = substr(distinct_groups$examiner_art_unit, 1,3)
distinct_groups = distinct_groups[distinct_groups$wg==163 | distinct_groups$wg==172,]
merged = merge(x=edges, y=distinct_groups, by.x="ego_examiner_id", by.y="examiner_id", all.x=TRUE)
merged = merged %>% rename(ego_art_unit=examiner_art_unit, ego_wg=wg)
merged = drop_na(merged)
merged = merge(x=merged, y=distinct_groups, by.x="alter_examiner_id", by.y="examiner_id", all.x=TRUE)
merged = merged %>% rename(alter_art_unit=examiner_art_unit, alter_wg=wg)
merged = drop_na(merged)
New_nodes = subset(merged, select=c(ego_examiner_id,ego_art_unit, ego_wg)) %>% rename(examiner_id=ego_examiner_id,art_unit=ego_art_unit,wg=ego_wg)
alterNodes = subset(merged, select=c(alter_examiner_id,alter_art_unit, alter_wg))%>% rename(examiner_id=alter_examiner_id,art_unit=alter_art_unit,wg=alter_wg)
nodes = rbind(New_nodes, alterNodes)
nodes = distinct(nodes)
nodes = nodes %>% group_by(examiner_id) %>% summarise(examiner_id=first(examiner_id), art_unit=first(art_unit), wg=first(wg))
#setting up the variables and tables
library(igraph)
library(tidygraph)
library(ggraph)
#creating a dataset with distinct information about only people from workgroups of our interest (in this case, 163 and 172) using both ego and alter nodes
distinct_groups = distinct(subset(applications, select=c(examiner_art_unit, examiner_id)))
distinct_groups$wg = substr(distinct_groups$examiner_art_unit, 1,3)
distinct_groups = distinct_groups[distinct_groups$wg==163 | distinct_groups$wg==172,]
merged = merge(x=edges, y=distinct_groups, by.x="ego_examiner_id", by.y="examiner_id", all.x=TRUE)
merged = merged %>% rename(ego_art_unit=examiner_art_unit, ego_wg=wg)
merged = drop_na(merged)
merged = merge(x=merged, y=distinct_groups, by.x="alter_examiner_id", by.y="examiner_id", all.x=TRUE)
merged = merged %>% rename(alter_art_unit=examiner_art_unit, alter_wg=wg)
merged = drop_na(merged)
#finalizing the nodes table
New_nodes = subset(merged, select=c(ego_examiner_id,ego_art_unit, ego_wg)) %>% rename(examiner_id=ego_examiner_id,art_unit=ego_art_unit,wg=ego_wg)
alterNodes = subset(merged, select=c(alter_examiner_id,alter_art_unit, alter_wg))%>% rename(examiner_id=alter_examiner_id,art_unit=alter_art_unit,wg=alter_wg)
nodes = rbind(New_nodes, alterNodes)
nodes = distinct(nodes)
nodes = nodes %>% group_by(examiner_id) %>% summarise(examiner_id=first(examiner_id), art_unit=first(art_unit), wg=first(wg))
# create graph objects for both workgroups
graph1 = graph_from_data_frame(d=merged, vertices=nodes, directed=TRUE)
graph1
#plotting the directed graph
graph1 = graph_from_data_frame(d=merged, vertices=nodes, directed=TRUE)
graph1
ggraph(graph, layout = "graphopt") +
geom_edge_link() +
geom_node_point(aes(color = workgroup), show.legend = FALSE)+
theme_graph()
#plotting the directed graph
graph1 = graph_from_data_frame(d=merged, vertices=nodes, directed=TRUE)
graph1
ggraph(graph1, layout = "graphopt") +
geom_edge_link() +
geom_node_point(aes(color = workgroup), show.legend = FALSE)+
theme_graph()
#plotting the directed graph
graph1 = graph_from_data_frame(d=merged, vertices=nodes, directed=TRUE)
graph1
ggraph(graph1, layout = "graphopt") +
geom_edge_link() +
geom_node_point(show.legend = FALSE)+
theme_graph()
#plotting the directed graph
graph1 = graph_from_data_frame(d=merged, vertices=nodes, directed=TRUE)
graph1
V(graph1)$degree <- degree(graph1)
V(graph1)$betweenness <- round(betweenness(graph1),2)
V(graph1)$closeness <- round(closeness(graph1),2)
e <- evcent(graph1)$vector
V(graph1)$evcent <- round(e,2)
V(graph1)$bonacich <- power_centrality(graph1, exponent = -2, rescale = T)
V(graph1)$bonacich <- ifelse(V(graph1)$bonacich < 0, 0, V(graph1)$bonacich)
V(graph1)$bonacich <- round(V(graph1)$bonacich,4)
ggraph(graph1, layout = "graphopt") +
geom_edge_link() +
geom_node_point(show.legend = FALSE)+
theme_graph()
#plotting the directed graph
graph1 = graph_from_data_frame(d=merged, vertices=nodes, directed=TRUE)
graph1
V(graph1)$degree <- degree(graph1)
V(graph1)$betweenness <- round(betweenness(graph1),2)
V(graph1)$closeness <- round(closeness(graph1),2)
e <- evcent(graph1)$vector
V(graph1)$evcent <- round(e,2)
V(graph1)$bonacich <- power_centrality(graph1, exponent = -2, rescale = T)
V(graph1)$bonacich <- ifelse(V(graph1)$bonacich < 0, 0, V(graph1)$bonacich)
V(graph1)$bonacich <- round(V(graph1)$bonacich,4)
ggraph(graph1, layout="kk") +
geom_edge_link()+
geom_node_point(aes(size=size, color=color), show.legend=T)
#plotting the directed graph
graph1 = graph_from_data_frame(d=merged, vertices=nodes, directed=TRUE)
graph1
V(graph1)$degree <- degree(graph1)
V(graph1)$betweenness <- round(betweenness(graph1),2)
V(graph1)$closeness <- round(closeness(graph1),2)
e <- evcent(graph1)$vector
V(graph1)$evcent <- round(e,2)
V(graph1)$bonacich <- power_centrality(graph1, exponent = -2, rescale = T)
V(graph1)$bonacich <- ifelse(V(graph1)$bonacich < 0, 0, V(graph1)$bonacich)
V(graph1)$bonacich <- round(V(graph1)$bonacich,4)
V(graph1)$size = Degree
#plotting the directed graph
graph1 = graph_from_data_frame(d=merged, vertices=nodes, directed=TRUE)
graph1
V(graph1)$degree <- degree(graph1)
V(graph1)$betweenness <- round(betweenness(graph1),2)
V(graph1)$closeness <- round(closeness(graph1),2)
e <- evcent(graph1)$vector
V(graph1)$evcent <- round(e,2)
V(graph1)$bonacich <- power_centrality(graph1, exponent = -2, rescale = T)
V(graph1)$bonacich <- ifelse(V(graph1)$bonacich < 0, 0, V(graph1)$bonacich)
Degree <- degree(graph1, v=V(graph1))
V(graph1)$bonacich <- round(V(graph1)$bonacich,4)
V(adviceNet)$color = nodes$art_unit
V(graph1)$size = Degree
ggraph(graph1, layout="kk") +
geom_edge_link()+
geom_node_point(aes(size=size, color=color), show.legend=T)
#plotting the directed graph
graph1 = graph_from_data_frame(d=merged, vertices=nodes, directed=TRUE)
graph1
V(graph1)$degree <- degree(graph1)
V(graph1)$betweenness <- round(betweenness(graph1),2)
V(graph1)$closeness <- round(closeness(graph1),2)
e <- evcent(graph1)$vector
V(graph1)$evcent <- round(e,2)
V(graph1)$bonacich <- power_centrality(graph1, exponent = -2, rescale = T)
V(graph1)$bonacich <- ifelse(V(graph1)$bonacich < 0, 0, V(graph1)$bonacich)
Degree <- degree(graph1, v=V(graph1))
V(graph1)$bonacich <- round(V(graph1)$bonacich,4)
V(graph1)$color = nodes$art_unit
V(graph1)$size = Degree
ggraph(graph1, layout="kk") +
geom_edge_link()+
geom_node_point(aes(size=size, color=color), show.legend=T)
#degree centrality
degree(graph1)
ggraph(graph1, layout = "graphopt") +
geom_edge_link() +
geom_node_point(aes(color = workgroup), show.legend = FALSE)+
theme_graph()
#degree centrality
degree(graph1)
ggraph(graph1, layout = "graphopt") +
geom_edge_link() +
geom_node_point(aes(color = color), show.legend = FALSE)+
theme_graph()
V(graph1)$degree <- degree(graph1)
plot(graph1, layout=layout.fruchterman.reingold,
vertex.size = 6,
vertex.label = NA,
vertex.label.cex = 0.8,
vertex.label.dist = 1.5,
vertex.label.color = "black",
vertex.color = V(graph1)$workgroup)
# add to have different colors for different workgroups: vertex.color = V(graph1)$workgroup)
#testing eigenvector centrality colored graph
V(graph1)$ec <- eigen_centrality(graph1, directed=T, weights=NA)$vector
hist(V(graph1)$ec)
# You could use the scales package, or define this normalisation function:
normalize <- function(x){(x-min(x))/(max(x)-min(x))}
(V(graph1)$ec_index <- round(normalize(V(graph1)$ec) * 9) + 1)
#ec_index should now be a category between 1 and 10 for your centralities
V(graph1)$color <- colorRampPalette(c("turquoise", "yellow","red"))(10)[V(graph1)$ec_index]
# Look at what we did
table(V(graph1)$color)
plot(graph1, vertex.label=NA, vertex.size=5)
#plotting the directed graph
graph1 = graph_from_data_frame(d=merged, vertices=nodes, directed=TRUE)
Degree <- degree(graph1, v=V(graph1))
V(graph1)$bonacich <- round(V(graph1)$bonacich,4)
#plotting the directed graph
graph1 = graph_from_data_frame(d=merged, vertices=nodes, directed=TRUE)
V(graph1)$color = nodes$art_unit
V(graph1)$size = Degree
#plotting the directed graph
graph1 = graph_from_data_frame(d=merged, vertices=nodes, directed=TRUE)
V(graph1)$color = nodes$art_unit
#degree centrality
V(fakebook)$degree <- degree(fakebook)
#degree centrality
V(graph1)$degree <- degree(graph1)
plot(graph1, layout=layout.fruchterman.reingold,
vertex.size = 6,
vertex.label = NA,
vertex.label.cex = 0.8,
vertex.label.dist = 1.5,
vertex.label.color = "black",
vertex.color = color)
#plotting the directed graph
graph1 = graph_from_data_frame(d=merged, vertices=nodes, directed=TRUE)
V(graph1)$color = nodes$art_unit
#degree centrality
V(graph1)$degree <- degree(graph1)
plot(graph1, layout=layout.fruchterman.reingold,
vertex.size = 6,
vertex.label = NA,
vertex.label.cex = 0.8,
vertex.label.dist = 1.5,
vertex.label.color = "black",
vertex.color = color)
#degree centrality
V(graph1)$degree <- degree(graph1)
plot(graph1, layout=layout.fruchterman.reingold,
vertex.size = 6,
vertex.label = NA,
vertex.label.cex = 0.8,
vertex.label.dist = 1.5,
vertex.label.color = "black",
vertex.color = graph1$color)
ggraph(graph1, layout="kk") +
geom_edge_link()+
geom_node_point(aes(size=size, color=color), show.legend=T)
Degree <- degree(adviceNet, v=V(adviceNet))
V(adviceNet)$size = Degree
ggraph(graph1, layout="kk") +
geom_edge_link()+
geom_node_point(aes(size=size, color=color), show.legend=T)
Degree <- degree(graph1, v=V(graph1))
V(graph1)$size = Degree
ggraph(graph1, layout="kk") +
geom_edge_link()+
geom_node_point(aes(size=size, color=color), show.legend=T)
degree(graph1, directed = TRUE)
degree(graph1)
betweenness(graph1, directed = TRUE)
closeness(graph1, directed = TRUE)
closeness(graph1)
evcent(graoh1, directed = TRUE)
evcent(graph1, directed = TRUE)
evcent(graph1, directed = TRUE)
e <- evcent(graph1)$vector
V(graph1)$evcent <- round(e,2)
plot(graph1, layout=layout.fruchterman.reingold,
vertex.size = 6,
vertex.label = paste(V(graph1)$name,V(graph1)$evcent,sep=":"),
vertex.label.cex = 0.8,
vertex.label.dist = 1.5,
vertex.label.color = "black",
vertex.color = "turquoise")
evcent(graph1, directed = TRUE)
e <- evcent(graph1)$vector
V(graph1)$evcent <- round(e,2)
plot(graph1, layout=layout.fruchterman.reingold,
vertex.size = 6,
vertex.label = NA),
evcent(graph1, directed = TRUE)
e <- evcent(graph1)$vector
V(graph1)$evcent <- round(e,2)
plot(graph1, layout=layout.fruchterman.reingold,
vertex.size = 6,
vertex.label = NA,
vertex.label.cex = 0.8,
vertex.label.dist = 1.5,
vertex.label.color = "black",
vertex.color = workgroup)
evcent(graph1, directed = TRUE)
e <- evcent(graph1)$vector
V(graph1)$evcent <- round(e,2)
plot(graph1, layout=layout.fruchterman.reingold,
vertex.size = 6,
vertex.label = NA,
vertex.label.cex = 0.8,
vertex.label.dist = 1.5,
vertex.label.color = "black",
vertex.color = graph1$workgroup)
evcent(graph1, directed = TRUE)
e <- evcent(graph1)$vector
V(graph1)$evcent <- round(e,2)
plot(graph1, layout=layout.fruchterman.reingold,
vertex.size = 6,
vertex.label = NA,
vertex.label.cex = 0.8,
vertex.label.dist = 1.5,
vertex.label.color = "black",
vertex.color = graph1$workgroup)
evcent(graph1, directed = TRUE)
e <- evcent(graph1)$vector
V(graph1)$evcent <- round(e,2)
plot(graph1, layout="kk",
vertex.size = 6,
vertex.label = NA,
vertex.label.cex = 0.8,
vertex.label.dist = 1.5,
vertex.label.color = "black",
vertex.color = graph1$workgroup)
evcent(graph1, directed = TRUE)
e <- evcent(graph1)$vector
V(graph1)$evcent <- round(e,2)
plot(graph1, layout=layout.fruchterman.reingold,
vertex.size = 6,
vertex.label = NA,
vertex.label.cex = 0.8,
vertex.label.dist = 1.5,
vertex.label.color = "black",
vertex.color = graph1$workgroup)
applications[applications$examiner_id==94782,]
